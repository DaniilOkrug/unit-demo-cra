name: CI-release

on:
  push:
    tags:
      - "v[0-9]+"

jobs:
  release_issue:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        run: |
          previous_tag=$(git tag --sort=-creatordate | sed -n '2p')
          changelog=$(git log --pretty=format:"- %s" "$previous_tag".."$GITHUB_REF")
          version=$(echo "$GITHUB_REF" | cut -d '/' -f 3)
          timestamp=$(git show -s --format=%ai ${GITHUB_REF})

          echo "Current tag: $GITHUB_REF"
          echo "Previous tag: ${previous_tag}"

          echo "::set-output name=timestamp::${timestamp}"
          echo "::set-output name=version::${version}"
          echo "::set-output name=changelog::${changelog}"

      - name: Create/Update Release Issue
        id: create_update_issue
        run: |
          issue_title="Release ${{ steps.changelog.outputs.version }}"
          issue_body="### Релиз ${{ steps.changelog.outputs.version }}\n\nhttps://daniilokrug.github.io/unit-demo-cra/ \n\nАвто: ${{ github.actor }}\nДата релиза: ${{ steps.changelog.outputs.timestamp }}\nНомер версии: ${{ steps.changelog.outputs.version }}\n\nChangelog:\n\n${{ steps.changelog.outputs.changelog }}"
          echo "issue_body=$issue_body" >> $GITHUB_ENV

          # Get the existing issue number, if it exists
          existing_issue_number=$(curl -s -X GET -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/issues?state=all" | jq -r '.[] | select(.title=="'"$issue_title"'") | .number')

          # If an existing issue is found, update its body
          if [[ -n "$existing_issue_number" ]]; then
            curl -s -X PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -d "{\"body\":\"$issue_body\"}" "https://api.github.com/repos/${{ github.repository }}/issues/$existing_issue_number"
          else
            curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -d "{\"title\":\"$issue_title\",\"body\":\"$issue_body\"}" "https://api.github.com/repos/${{ github.repository }}/issues"
          fi

          existing_issue_number=$(curl -s -X GET -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/issues?state=all" | jq -r '.[] | select(.title=="'"$issue_title"'") | .number')
          echo "existing_issue_number=$existing_issue_number" >> $GITHUB_ENV

  tests:
    needs: release_issue
    name: Testing Unit/E2E

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Playwright setup
        run: npx playwright install

      - name: Unit tests
        run: npm run test-ci

      - name: Publish Unit tests results
        uses: actions/upload-artifact@v3
        with:
          name: Unit Tests Results
          path: test-report.html

      - name: E2E tests
        run: npx playwright test --project=chromium

      - name: Publish E2E tests results
        uses: actions/upload-artifact@v3
        with:
          name: E2E Tests Results
          path: ./my-report/index.html

  updated_issue:
    needs: tests
    name: Publish artifacts

    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Update issue
        run: |
          run_id="${{ github.run_id }}"
          echo ${{ github.run_id }}

          artifacts=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/DaniilOkrug/unit-demo-cra/actions/artifacts)
          echo "All artifacts"
          echo "${artifacts}"

          echo "Unit artifact"
          artifact_unit=$(echo "$artifacts" | jq -r ".artifacts | map(select(.name == \"Unit Test Results\" and .workflow_run.id == $run_id)) | .[].url")
          echo "${artifact_unit}"
          # curl -s -X PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -d "{\"body\":\"$issue_body \n\n Результаты Unit: $artifact_unit\"}" "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.release_issue.outputs.existing_issue_number }}"

  deploy:
    needs: tests
    name: Deploy

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install and Build
        run: |
          npm ci
          npm run build

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build

  finish:
    needs: [deploy, updated_issue]
    name: Close Issue

    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Close Issue
        run: |
          version=$(echo "$GITHUB_REF" | cut -d '/' -f 3)
          existing_issue_number=$(curl -s -X GET -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/issues?state=all" | jq -r '.[] | select(.title=="'"$issue_title"'") | .number')

          curl -X PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -d '{"state":"closed", "state_reason": "completed"}' "https://api.github.com/repos/${{ github.repository }}/issues/$existing_issue_number"
